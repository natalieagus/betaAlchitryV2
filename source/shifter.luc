module shifter (
    input a[32],
    input b[5],
    input alufn_signal[6],
    output shift[32]
  ) {

    left_shifter left_shifter;
    bit_reverse bit_reverse3_2in(#SIZE(32));
    bit_reverse bit_reverse3_2out(#SIZE(32));
    mux2 choose_reverse[32];
    mux2 choose_left_right[32];
    sig arith;
    
  always {
    
    bit_reverse3_2in.in = a;
    choose_reverse.s0 = 32x{alufn_signal[0]};
    choose_left_right.s0 = 32x{alufn_signal[0]};
    
    repeat(i, 32){
        choose_reverse.in[i] = c{bit_reverse3_2in.reversed[i], a[i]}; 
    }
    
    arith = 0;
    if (alufn_signal[1]){
       arith = 1; 
    }
    
    // left shifter 
    left_shifter.b = b;
    left_shifter.a = choose_reverse.out;
    left_shifter.pad = arith;
    
    bit_reverse3_2out.in = left_shifter.shl;
    
        repeat(j, 32){
            choose_left_right.in[j] = c{bit_reverse3_2out.reversed[j], left_shifter.shl[j]};
        }
    
    
    shift = choose_left_right.out;
      
  }
}